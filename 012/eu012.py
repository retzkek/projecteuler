#!/usr/bin/python
# encoding: utf-8
"""
project euler (projecteuler.net) problem 12
solution by Kevin Retzke (retzkek@gmail.com), April 2012

Problem #12
============
The sequence of triangle numbers is generated by adding the
natural numbers. So the 7th triangle number would be 1 + 2 +
3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over
five divisors.

What is the value of the first triangle number to have over 
five hundred divisors?
"""

def triangle(n):
    """
    returns the nth triangle number
    """
    return sum(range(1,n+1))

def countFactors(n):
    """
    returns the number of factors of n
    """
    r = 0
    i = 1
    while i*i < n:
        if n%i == 0:
            r += 2
        i += 1
    return r

if __name__ == "__main__":
    i = 1
    m = 0
    while True:
        t = triangle(i)
        tf = countFactors(t)
        if tf > m:
            m = tf
            print i,t, tf
            if tf >= 500:
                break
        i += 1


